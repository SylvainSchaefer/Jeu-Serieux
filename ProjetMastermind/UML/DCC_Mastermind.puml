@startuml
'https://plantuml.com/class-diagram
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

Class mastermind.Combinaison{
+ <<create>> Combinaison()

}



Enum mastermind.Couleurs<<enum>> {
BLEU
ORANGE
ROUGE
VERT
VIOLET
JAUNE
NOIR
BLANC

}
Class mastermind.GameController{
+ <<create>> GameController(plateau: Plateau)


- nbManches: Integer
- nbPionsDispo: Integer
- nbPionsCombinaison: Integer
- nbTentatives: Integer


- tentativeValidee: Boolean
- manchesCount: Integer
- tentativesCount: Integer
+ createPartie(nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer)
+ gameStart()
+ validerTentative(tentative: void)
{static} + getInput(): void
{static} + afficherTableauIndices(tableau: void)
{static} + afficherIndicesInt(tentative: Tentative)

}

mastermind.GameController o-- "plateau"mastermind.Plateau
mastermind.GameController o-- "partie"mastermind.Partie
mastermind.GameController o-- "mancheActuelle"mastermind.Manche
mastermind.GameController o-- "tentativeActuelle"mastermind.Tentative
mastermind.GameController --> mastermind.Tentative: afficherIndicesInt


Enum mastermind.Indice<<enum>> {
NOIR
BLANC
VIDE

}
Class mastermind.Main{
+ <<create>> Main()
{static} + main(args: void)

}



Class mastermind.Manche{
+ <<create>> Manche(nbPionsDispo: Integer, tailleCombinaison: Integer, nombreTentatives: Integer, obervers: MastermindObserver[*])
- combinaisonSecrete: void
- nbTentativesMax: Integer
- tailleCombinaison: Integer
- nbPionsDispo: Integer

- isFinished: Boolean
- score: Integer

+ createTentative(i: Integer): Tentative
+ getTentativeActuelle(): Tentative
+ getCombinaisonSecrete(): void
+ genererCombinaisonAleatoire()
+ verifierCombinaisonJoueurInt()
+ verifierCombinaisonIndices()
+ couleurDansCombinaison(combinaisonSecrete: void, couleur: Couleurs): Boolean
+ isFinished(): Boolean
+ upgradeScore()
+ getScore(): Integer
- notifyObserversStartTentative(nbPionsCombi: Integer)
- notifyObserversUpdateIndice(indice: void)

}

mastermind.Manche o-- "tentativeActuelle"mastermind.Tentative
mastermind.Manche o--- "listObservers"mastermind.MastermindObserver
mastermind.Manche --> mastermind.Couleurs: couleurDansCombinaison


Interface mastermind.MastermindObserver<<interface>> {
{abstract} + init(nbTentatives: Integer, nbPionsCombinaison: Integer)
{abstract} + showAvaibleColors(couleursDispo: void)
{abstract} + startTentative(nbPionsCombi: Integer)
{abstract} + updateIndice(indices: void)

}

Class mastermind.Partie{
+ <<create>> Partie(observers: MastermindObserver[*], nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer)
- nbManches: Integer
- nbPionsDispo: Integer
- nbPionsCombinaison: Integer
- nbTentatives: Integer
- score: Integer


+ createManche(): Manche
+ upgradeScore(nb: Integer)
+ getScore(): Integer
- notifyObserversShowAvaibleColors()

}

mastermind.Partie o-- "mancheActuelle"mastermind.Manche
mastermind.Partie o--- "listObservers"mastermind.MastermindObserver


Class mastermind.Plateau{
+ <<create>> Plateau()

- meilleurScore: Integer

+ createPartie(nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer): Partie
+ createJoueur(nom: String)
+ addObserver(mastermindObserver: MastermindObserver)
- notifyObserversInit(nbTentatives: Integer, nbPionsCombi: Integer)

}

mastermind.Plateau o--- "listObservers"mastermind.MastermindObserver
mastermind.Plateau --> mastermind.MastermindObserver: addObserver


Class mastermind.Tentative{
+ <<create>> Tentative(tailleCombinaison: Integer)
+ <<create>> Tentative()
- tentative: void
+ indices: void
+ pionsBienPlaces: Integer
+ setTentative(tentative: void)
+ getTentative(): void
+ getIndices(): void
+ augmentePionsBienPlace()
+ setIndicesCouleurs(indice: Indice, index: Integer)

}

mastermind.Tentative --> mastermind.Indice: setIndicesCouleurs


Class mastermind.ViewGame{
+ <<create>> ViewGame(controller: GameController)






- isDragging: Boolean
- pions: void
- emptyCells: void
+ init(nbTentatives: Integer, nbPionsCombinaison: Integer)
+ showAvaibleColors(couleursDispo: void)
+ startTentative(nbPionsCombi: Integer)
+ updateIndice(indices: void)

}
mastermind.ViewGame ..|> mastermind.MastermindObserver

mastermind.ViewGame o-- "controller"mastermind.GameController


Class mastermind.ViewStart{
+ <<create>> ViewStart(controller: GameController)

+ setParameters()

}

mastermind.ViewStart o-- "controller"mastermind.GameController



@enduml

