@startuml
'https://plantuml.com/class-diagram
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

Class mastermind.Combinaison{
+ <<create>> Combinaison(tailleCombinaison: Integer)
- combinaison: void
+ getCombinaison(): void
+ setCouleur(couleur: Couleurs, index: Integer)
+ getLength(): Integer
+ genererCombinaisonAleatoire(nbPionsDispo: Integer)

}

mastermind.Combinaison --> mastermind.Couleurs: setCouleur


Enum mastermind.Couleurs<<enum>> {
BLEU
ORANGE
ROUGE
VERT
VIOLET
JAUNE
NOIR
BLANC

}
Class mastermind.GameController{
+ <<create>> GameController(plateau: Plateau)




- nbManches: Integer
- nbPionsDispo: Integer
- nbPionsCombinaison: Integer
- nbTentatives: Integer
- tentativeValidee: Boolean
- manchesCount: Integer
+ createPartie(nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer)
+ gameStart()
+ validerTentative(tentative: Combinaison)

}

mastermind.GameController o-- "plateau"mastermind.Plateau
mastermind.GameController o-- "partie"mastermind.Partie
mastermind.GameController o-- "mancheActuelle"mastermind.Manche
mastermind.GameController o-- "tentativeActuelle"mastermind.Tentative
mastermind.GameController --> mastermind.Combinaison: validerTentative


Enum mastermind.Indice<<enum>> {
NOIR
BLANC
VIDE

}
Class mastermind.Main{
+ <<create>> Main()
{static} + main(args: void)

}



Class mastermind.Manche{
+ <<create>> Manche(nbPionsDispo: Integer, tailleCombinaison: Integer, nombreTentatives: Integer, obervers: MastermindObserver[*])

- nbTentativesMax: Integer
- tailleCombinaison: Integer
- nbPionsDispo: Integer

- score: Integer

+ createTentative(): Tentative
+ addTentative(tentative: Tentative)
+ genererCombinaisonAleatoire()
+ verifierCombinaisonIndices(): Boolean
+ couleurDansCombinaison(combinaisonSecrete: Combinaison, couleur: Couleurs): Boolean
+ upgradeScore()
+ getScore(): Integer
- notifyObserversStartTentative(nbPionsCombi: Integer)
- notifyOberserversNewManche(isFinished: Boolean)
- notifyOberserversAddTentativeUpdateIndice(tentative: Tentative, indices: void)

}

mastermind.Manche o-- "combinaisonSecrete"mastermind.Combinaison
mastermind.Manche o--- "listTentatives"mastermind.Tentative
mastermind.Manche o--- "listObservers"mastermind.MastermindObserver
mastermind.Manche --> mastermind.Tentative: addTentative
mastermind.Manche --> mastermind.Combinaison: couleurDansCombinaison
mastermind.Manche --> mastermind.Couleurs: couleurDansCombinaison
mastermind.Manche --> mastermind.Tentative: notifyOberserversAddTentativeUpdateIndice


Interface mastermind.MastermindObserver<<interface>> {
{abstract} + init(nbTentatives: Integer, nbPionsCombinaison: Integer)
{abstract} + showAvaibleColors(couleursDispo: void)
{abstract} + startTentative(nbPionsCombi: Integer)
{abstract} + addTentativeUpdateIndice(tentative: Tentative, indices: void)
{abstract} + newManche(isWin: Boolean)

}

Class mastermind.Partie{
+ <<create>> Partie(observers: MastermindObserver[*], nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer)
- nbManches: Integer
- nbPionsDispo: Integer
- nbPionsCombinaison: Integer
- nbTentatives: Integer
- score: Integer


+ createManche(): Manche
+ upgradeScore(nb: Integer)
+ getScore(): Integer
- notifyObserversShowAvaibleColors()

}

mastermind.Partie o-- "mancheActuelle"mastermind.Manche
mastermind.Partie o--- "listObservers"mastermind.MastermindObserver


Class mastermind.Plateau{
+ <<create>> Plateau()

- meilleurScore: Integer

+ createPartie(nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer): Partie
+ setJoueur(nom: String)
+ addObserver(mastermindObserver: MastermindObserver)
- notifyObserversInit(nbTentatives: Integer, nbPionsCombi: Integer)

}

mastermind.Plateau o--- "listObservers"mastermind.MastermindObserver
mastermind.Plateau --> mastermind.MastermindObserver: addObserver


Class mastermind.Tentative{
+ <<create>> Tentative(tailleCombinaison: Integer)

+ indices: void
+ setCombinaisonCouleur(combinaisonCouleur: Combinaison)
+ getCombinaison(): Combinaison
+ getCouleurs(): void
+ getIndices(): void
+ setIndicesCouleurs(indice: Indice, index: Integer)

}

mastermind.Tentative o-- "combinaisonCouleur"mastermind.Combinaison
mastermind.Tentative --> mastermind.Combinaison: setCombinaisonCouleur
mastermind.Tentative --> mastermind.Indice: setIndicesCouleurs


Class mastermind.ViewEnd{
+ <<create>> ViewEnd()

}



Class mastermind.ViewGame{
+ <<create>> ViewGame(controller: GameController)






- nbPionsCombi: Integer
- pions: void
- emptyCells: void
+ init(nbTentatives: Integer, nbPionsCombinaison: Integer)
+ showAvaibleColors(couleursDispo: void)
+ startTentative(nbPionsCombi: Integer)
+ addTentativeUpdateIndice(tentative: Tentative, indices: void)
+ newManche(isWin: Boolean)

}
mastermind.ViewGame ..|> mastermind.MastermindObserver

mastermind.ViewGame o-- "controller"mastermind.GameController
mastermind.ViewGame --> mastermind.Tentative: addTentativeUpdateIndice


Class mastermind.ViewStart{
+ <<create>> ViewStart(controller: GameController)

+ setParameters()

}

mastermind.ViewStart o-- "controller"mastermind.GameController



@enduml

