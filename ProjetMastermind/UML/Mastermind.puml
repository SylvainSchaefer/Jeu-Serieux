@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

class Main{
    +main(args : String){static}
}

package models
{
    class Plateau
    {
        -nomJoueur : String
        -meilleurScore : Integer
        +createPartie() : Partie
        +createJoueur(nom : String) : Joueur
    }


    class Partie
    {
        -nbTentatives: Integer
        -tailleCombinaison: Integer
        -nbManches: Integer
        -nbPionsDispo: Integer
        -score: Integer
        +<<create>>Partie(nbManches : Integer, nbPionsDispo : Integer, tailleCombinaison : Integer, nbTentatives : Integer)
        +startPartie()
        +createManche(tailleCombinaison : Integer, nbTentatives: Integer): Manche
        +upgradeScore()
        +getScore()
        +setAffichage(mode : IndiceStrategy)
    }


    class Manche
    {
        -score :  Integer
        -nbTentatives : Integer
        -tailleCombinaison : Integer
        -finished : Boolean
        +<<create>>Manche(tailleCombinaison : Integer, nombreTentatives : Integer)
        +startManche()
        +skipManche()
        +createTentative(i : Integer) : Tentative
        +getCombinaisonSecrete() : Combinaison
        +verifierCombinaisonIndices(tentative : Tentative)
        +upgradeScore()
        +getScore()
    }

    class Tentative
    {
        +<<create>>Tentative(tailleCombinaison : Integer)
        +validerCombinaison()
        +augmentePionsBienPlace()
        +setIndicesCouleurs()
        +setCouleurIndex(combinaison : Combinaison, couleur : CouleurPion, index : Integer)
        +getIndice() : Indice[*]
        +getCombinaisonJoueur() : Combinaison
    }

    class Combinaison{
        -taille : Integer
        +<<create>>Combinaison(taille : Integer)
        +genererCombinaisonSecrete(pionsDispo : Integer)
        +couleurDansCombinaison(couleur : CouleurPion) : Boolean
        +reset()
    }


    interface PartieObserver <<interface>>
    {
        +updateIndice(indice: Indice)
        +...()
    }

    class IndiceStrategyFactory{
        +createNumeric() : IndiceStrategy
        +createEasy() : IndiceStrategy
        +createClassic() : IndiceStrategy
    }

    interface IndiceStrategy <<interface>>
    {

    }


    class IndiceEasy implements IndiceStrategy
    {
    }

    class IndiceClassic implements IndiceStrategy
    {
    }


    class IndiceNum implements IndiceStrategy
    {
    }


    enum CouleurPion <<enumeration>>
    {
        +ROUGE
        +JAUNE
        +VERT
        +BLEU
        +VIOLET
        +ORANGE
        +NOIR
        +BLANC
    }

    enum Indice <<enumeration>>{
        +BIENPLACE
        +MALPLACE
        +VIDE
    }

}



package views
{
    class ViewStart implements PartieObserver
    {
        +createPartie(nomJoueur : String, nbManches : Integer, nbPionsDispo : Integer, tailleCombinaison : Integer, nbTentatives : Integer)
    }


    class ViewGame implements PartieObserver
    {
        +changeAffichageClassique()
        +changeAffichageFacile()
        +changeAffichageNumerique()
        +placerPionCombinaison(index : Integer, couleur : CouleurPion)
        +validerCombinaison()
        +skipManche()
        +resetCombinaison()
    }


    class ViewEnd implements PartieObserver
    {
        +restart()
    }
}


package controller
{
    class GameController
    {
        +createPartie(nomJoueur : String, nbManches : Integer, nbPionsDispo : Integer, tailleCombinaison : Integer, nbTentatives : Integer)
        +placerPionCombinaison(index : Integer, couleur : CouleurPion)
        +validerCombinaison()
        +resetCombinaison()
        +skipManche()
        +modifierModeAffichageIndice()
        +setAffichageIndiceFacile()
        +setAffichageIndiceNumerique()
        +setAffichageClassique()
    }
}


Plateau "1" *--> "1 -partie" Partie : Crée >
Partie *---> "*\n -manche" Manche : Crée >

Partie "*" o--> "*\n-listeObservers" PartieObserver: observe <
Partie " 1 " o-left-> "1\n -strategy" IndiceStrategy : selectionne >
Manche "*" o--> "*\n-listeObservers" PartieObserver: observe <
Manche *--> Tentative : Crée
Manche *--->"1 \n-combinaisonSecrète" Combinaison : Possède >


Tentative *--->"1 \n-combinaisonJoueur" Combinaison : Possède >
Tentative *--->"4..6 \n-indices" Indice : Possède >

Combinaison o--> "4..6\n-couleurs"CouleurPion

ViewGame o-up-> "1\n -controller" GameController
ViewEnd o-up-> "1\n -controller" GameController
ViewStart o-up-> "1\n -controller" GameController


GameController o-left-> "1\n manipule" Partie
GameController o-left-> "1\n manipule" Plateau
GameController o-left-> "1\n manipule" Manche
GameController o-left-> "1\n manipule" Tentative
GameController *->"1 \n -_stratFactory" IndiceStrategyFactory

IndiceStrategyFactory ..> IndiceStrategy : <<use>>
IndiceStrategyFactory ..> IndiceNum : <<use>>
IndiceStrategyFactory ..> IndiceEasy : <<use>>
IndiceStrategyFactory ..> IndiceClassic : <<use>>

Main ..> Plateau : <<use>>
Main ..> GameController : <<use>>
Main ..> ViewGame : <<use>>
Main ..> ViewStart : <<use>>
Main ..> ViewEnd : <<use>>


@enduml
