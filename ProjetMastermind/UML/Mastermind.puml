@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

class Main{
    +main(args : String){static}
}

package models
{
    class Plateau
    {
        -nomJoueur : String
        +createPartie(nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer): Partie
        +setJoueur(nom: String)
        +getNomJoueur() : String
        +addObserver(mastermindObserver: MastermindObserver)
    }


    class Partie
    {
        - nbManches: Integer
        - nbPionsDispo: Integer
        - nbPionsCombinaison: Integer
        - nbTentatives: Integer
        - typeIndice: Integer
        - mancheCount : Integer
        - score: Integer
        - tabScore : Integer[*]
        - tabTenta : Integer[*]
        + <<create>> Partie(observers: MastermindObserver[*], nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer)
        + createManche(): Manche
        + updateScore()
        + getScore(): Integer
        + getManchesCount() : Integer
        + getTabScores() : Integer[*]
        + getTabTenta() : Integer[*]
        - notifyObserversShowAvaibleColors()
        - notifyObserversInit()
    }


    class Manche
    {
        - nbTentativesMax: Integer
        - tailleCombinaison: Integer
        - nbPionsDispo: Integer
        - score: Integer
        - compteurCouleurs : <CouleurPion, Integer>[*]

        + <<create>> Manche(nbPionsDispo: Integer, tailleCombinaison: Integer, nombreTentatives: Integer, obervers: MastermindObserver[*])
        + createTentative(): Tentative
        + addTentative(tentative : Tentative)
        + verifierCombinaisonIndices() : Boolean
        + couleurDansCombinaison(combinaisonSecrete: CouleurPion[], couleur: CouleurPion): Boolean
        + initCompteur(compteur : <CouleurPion, Integer>[*])
        + giveUp()
        + getScore(): Integer
        + getNbTenta() : Integer
        + getNbPionsCombi() : Integer
        + getNbTentativesMax() : Integer
        - notifyObserversStartTentative(nbPionsCombi: Integer)
        - notifyObserversNewManche(isWin : Boolean, nbTentatives : Integer)
        - notifyObserversUpdateIndice(manche:  Manche, tentative : Tentative, indices: Indices[])
    }

    class Tentative
    {
        +<<create>>Tentative(tailleCombinaison : Integer)
        + setCombinaisonCouleur(combinaisonCouleur : Combinaison)
        + getCombinaison(): Combinaison
        + getIndices(): Indice[]
        + setIndicesCouleurs(indice: Indice, index: Integer)
    }

    class Combinaison
    {
        +<<create>>Combinaison(tailleCombinaison : Integer)
        +getCombinaison() : CouleurPion[*]
        +genererCombinaisonAleatoire(dispoPions : Integer)
    }


    interface mastermindObserver <<interface>>
    {
        {abstract} + init(manche: Manche, typeIndice: Integer, numManche: Integer)
        {abstract} + showAvaibleColors(couleursDispo: Couleurs[])
        {abstract} + startTentative(nbPionsCombi: Integer)
        {abstract} + updateIndice(indices: Indices[])
        {abstract} + newManche(isWin : Boolean, nbTentatives : Integer)
    }

    enum CouleurPion <<enumeration>>
    {
        +BLEU
        +ORANGE
        +ROUGE
        +VERT
        +VIOLET
        +JAUNE
        +NOIR
        +BLANC
    }

    enum Indice <<enumeration>>{
        +NOIR
        +BLANC
        +VIDE
    }

}



package view
{
    class ViewStart
    {
        + <<create>> ViewStart(controller: GameController)
        + setParameters()
        + isValidNumber(text : String, typeField : Integer) : Boolean
    }


    class ViewGame implements mastermindObserver
    {
        - width: Integer
        - length: Integer
        +<<create>>ViewGame(gameController: GameController)
        + init(mancheActuelle : Manche, typeIndice : Integer, numManche : Integer)
        + showAvaibleColors(couleursDispo: CouleurPion[])
        + startTentative(nbPionsCombi: Integer)
        + updateIndice(indices: Indice[])
        + addTentativeUpdateIndice(mancheActuelle : Manche, tentative : Tentative, indices : Indice[], typeIndice : Integer, score : Integer)
    }


    class ViewEnd
    {
        +<<create>>ViewEnd()
        + end(nomJoueur : String, score : Integer, tabScore : Integer[], tabTenta : Integer)
        - animateBarVertical(barre : JProgressBar, valeurFinale : Integer)
    }
}


package controller
{
    class GameController
    {
        + <<create>> GameController(plateau: Plateau, viewEnd : ViewEnd)
        + gameStart()
        + createPartie(nbManches: Integer, nbPionsDispo: Integer, nbPionsCombinaison: Integer, nbTentatives: Integer)
        + validerTentative(tentative: CouleurPion[])
        + giveUpManche()
    }
}


Plateau o-->Partie : Crée
Plateau "*" o--> "*\n-listeObservers" mastermindObserver: observe <
Partie *---> "*\n -manche" Manche : Crée >

Partie "*" o--> "*\n-listeObservers" mastermindObserver: observe <
Manche "*" o--> "*\n-listeObservers" mastermindObserver: observe <
Manche o-->"2..12\n -listTentatives" Tentative : Crée >

Tentative *--->"4..6 \n-indices" Indice : Possède >


ViewGame o-up-> "1\n -controller" GameController
ViewGame ..> Manche : <<use>>
ViewGame ..> Tentative : <<use>>
ViewGame ..> Indice : <<use>>
ViewEnd o-up-> "1\n -controller" GameController
ViewStart o-up-> "1\n -controller" GameController

GameController o-down-> "1\n -viewEnd" ViewEnd
GameController o-left-> "1\n manipule" Partie
GameController o-left-> "1\n manipule" Plateau
GameController o-left-> "1\n manipule" Manche
GameController o-left-> "1\n manipule" Tentative

Main ..> Plateau : <<use>>
Main ..> GameController : <<use>>
Main ..> ViewGame : <<use>>
Main ..> ViewStart : <<use>>

Manche *--> "1\n -combinaisonSecrete" Combinaison
Tentative *--> "1\n -combiJoueur" Combinaison
Combinaison *--> "4..6\n possède" CouleurPion


@enduml
