@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members


package models
{
    class Plateau
    {
        +createPartie() : Partie
        +createJoueur(nom : String) : Joueur
    }

    class Joueur
    {
        -nom : String
    }

    class Partie
    {
        -nbTentatives: Integer
        -tailleCombinaison: Integer
        -nbManches: Integer
        -nbPionsDispo: Integer
        -score: Integer
        +<<create>>Partie(nbManches : Integer, nbPionsDispo : Integer, tailleCombinaison : Integer, nbTentatives : Integer)
        +startPartie()
        +createManche(tailleCombinaison : Integer, nbTentatives: Integer): Manche
        +upgradeScore()
        +getScore()
        +setAffichage()
    }


    class Manche
    {
        -nbTentatives : Integer
        -tailleCombinaison : Integer
        -finished : Boolean
        +<<create>>Manche(tailleCombinaison : Integer, nombreTentatives : Integer)
        +startManche()
        +skipManche()
        +createTentative(i : Integer) : Tentative
        +getCombinaisonSecrete() : Combinaison
        +verifierCombinaisonJoueurInt(tentative : Tentative)
        +verifierCombinaisonIndices(tentative : Tentative)
        +upgradeScore()
        +getScore()
    }

    class Tentative
    {
        - pionsBienPlaces : Integer
        +<<create>>Tentative(tailleCombinaison : Integer)
        +validerCombinaison()
        +augmentePionsBienPlace()
        +setIndicesCouleurs()
        +setCouleurIndex(combinaison : Combinaison, couleur : CouleurPion, index : Integer)
        +getIndice() : Indice[*]
        +getCombinaisonJoueur() : Combinaison
    }

    class Combinaison{
        +genererCombinaisonSecrete()
        +couleurDansCombinaison(couleur : CouleurPion) : Boolean
        +reset()
    }

    class Indice{

    }


    interface PartieObserver <<interface>>
    {
        +updateIndice(indice: Indice)
        +...()
    }


    interface IndiceStrategy <<interface>>
    {

    }


    class IndiceEasy implements IndiceStrategy
    {
    }

    class IndiceClassic implements IndiceStrategy
    {
    }


    class IndiceNum implements IndiceStrategy
    {
    }


    enum CouleurPion <<enumeration>>
    {
        +ROUGE
        +JAUNE
        +VERT
        +BLEU
        +VIOLET
        +ORANGE
        +NOIR
        +BLANC
        +RIEN
    }

    enum IndiceCouleur <<enumeration>>{
        +NOIR
        +BLANC
        +RIEN
    }

}



package views
{
    class ViewStart implements PartieObserver
    {
    }


    class ViewGame implements PartieObserver
    {
        +changeAffichageClassique()
        +changeAffichageFacile()
        +changeAffichageNumerique()
    }


    class ViewEnd implements PartieObserver
    {
    }
}


package controller
{
    class GameController
    {
        +choixCouleurCombinaison()
        +validerCombinaison()
        +resetCombinaison()
        +skipManche()
        +modifierModeAffichageIndice()
        +setAffichageIndiceFacile()
        +setAffichageIndiceNumerique()
        +setAffichageClassique()
    }
}


Plateau "1" *--> "1 -partie" Partie : Crée >
Plateau *-left-> "1 -joueur" Joueur : Crée >
Partie *---> "*\n -manche" Manche : Crée >

Partie "*" o--> "*\n-listeObservers" PartieObserver: observe <
Manche "*" o--> "*\n-listeObservers" PartieObserver: observe <
Manche *--> Tentative : Crée
Manche " 1 " o-left-> "1\n -strategy" IndiceStrategy : selectionne >
Manche *--->"1 \n-combinaisonSecrète" Combinaison : Possède >


Tentative *--->"1 \n-combinaisonJoueur" Combinaison : Possède >
Tentative *--->"1 \n-indices" Indice : Possède >

Combinaison o--> "4..6\n-couleurs"CouleurPion

ViewGame o-up-> "1\n -controller" GameController
ViewEnd o-up-> "1\n -controller" GameController
ViewStart o-up-> "1\n -controller" GameController


GameController o-left-> "1\n manipule" Partie
GameController o-left-> "1\n manipule" Plateau

@enduml
